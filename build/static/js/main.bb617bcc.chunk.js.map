{"version":3,"sources":["components/ContactForm/InputForm/InputForm.module.css","components/ContactForm/InputForm/InputForm.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","InputForm","state","name","number","sex","handleChange","addContact","className","s","contactFormContainer","onSubmit","onChange","type","value","pattern","title","required","btn","checked","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","delContactRequest","delContactSuccess","delContactError","contactsActions","changeFilter","axios","defaults","baseURL","item","dispatch","actions","post","then","data","catch","error","id","delete","a","get","getFilter","contacts","filter","getContacts","getVisibleContacts","createSelector","lowerFilter","toLowerCase","contact","includes","ContactForm","e","currentTarget","setState","uuidv4","preventDefault","props","some","elem","alert","reset","this","handleSexRadio","React","Component","connect","contactsOperations","contactsSelectors","handlerDel","map","onClick","handlerFilter","target","App","fetchContacts","length","contactSelectors","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb617bcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormContainer\":\"InputForm_contactFormContainer__3d_1e\",\"btn\":\"InputForm_btn__2MB_2\"};","import React from 'react';\nimport s from \"./InputForm.module.css\";\n\n\nconst InputForm = ({state: {name, number, sex}, handleChange, addContact}) => {\n\n    return <div className={s.contactFormContainer}>\n        <h3>Name</h3>\n        <form onSubmit={addContact}\n        >\n            <input onChange={handleChange}\n                   type=\"text\"\n                   name=\"name\"\n                   value={name}\n                   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                   title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                   required\n            />\n            <h3>Number</h3>\n            <input onChange={handleChange}\n                   type=\"tel\"\n                   name=\"number\"\n                   value={number}\n                   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                   title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                   required\n            />\n            <div>\n                <button type=\"submit\"\n                        className={s.btn}>Add contact</button>\n            </div>\n            <label>\n                <input type=\"radio\" name=\"sex\" value=\"male\" checked={sex === \"male\"} onChange={handleChange} /> 👨\n                <input type=\"radio\" name=\"sex\" value=\"female\" checked={sex === \"female\"} onChange={handleChange} /> 👩\n            </label>\n        </form>\n    </div>\n}\n\nexport default InputForm","\nimport { createAction } from '@reduxjs/toolkit'\n\n\n\n\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nconst fetchContactError = createAction('contacts/fetchContactError');\n\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst delContactRequest = createAction('contacts/delContactRequest');\nconst delContactSuccess = createAction('contacts/delContactSuccess');\nconst delContactError = createAction('contacts/delContactError');\n\nconst changeFilter = createAction('contacts/filteredContacts');\n\n\n\n\n\nconst contactsActions = {changeFilter,\n    addContactRequest, addContactSuccess, addContactError,\n    delContactRequest, delContactSuccess, delContactError,\n    fetchContactRequest, fetchContactSuccess, fetchContactError}\n\nexport default contactsActions\n\n\n\n\n// const addContact = (data) => ({\n//     type: types.ADD,\n//     payload: ({\n//         name: data.name,\n//         number: data.number,\n//         id: data.id,\n//         sex: data.sex,\n//     })\n// })\n// const delContact = (id) => ({\n//     type: types.DEL,\n//     payload: id\n// })\n// const changeFilter = (value) => ({\n//     type: types.FILTER,\n//     payload: value,\n// })","import axios from \"axios\";\nimport actions from './contacts-actions'\n\naxios.defaults.baseURL = 'http://localhost:3000/'\n\n\n\n\n\n// const fetchContacts = () => dispatch => {\n//     dispatch(actions.fetchContactRequest());\n//\n//     axios.get('/contacts')\n//         .then(({data}) => dispatch(actions.fetchContactSuccess(data)))\n//         .catch(error => dispatch(actions.fetchContactError(error)))\n// }\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(actions.fetchContactRequest());\n\n    try {\n        const {data} = await axios.get('/contacts')\n        dispatch(actions.fetchContactSuccess(data))\n    } catch (error) {\n        dispatch(actions.fetchContactError(error))\n    }\n}\n\n\n\nconst addContact = item => dispatch => {\n    dispatch(actions.addContactRequest());\n\n    axios\n        .post('/contacts', item)\n        .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n        .catch(error => dispatch(actions.addContactError(error)));\n}\n\n\nconst delContact = id => dispatch => {\n    dispatch(actions.delContactRequest());\n\n    axios\n        .delete(`/contacts/${id}`)\n        .then(() => dispatch(actions.delContactSuccess(id)))\n        .catch(error => dispatch(actions.delContactError(error)))\n\n}\n\n\nexport default {addContact, delContact, fetchContacts}","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContacts = state => state.contacts.contacts\nconst getFilter = state => state.contacts.filter\nconst getAllContacts = state => state.contacts.contacts\n\n\n// const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state)\n//     const filter = getFilter(state)\n//\n//     const lowerFilter = filter.toLowerCase()\n//\n//     return contacts.filter(contact =>\n//         contact.name.toLowerCase().includes(lowerFilter))\n// }\n\nconst getVisibleContacts = createSelector([getAllContacts, getFilter],\n    (contacts, filter) => {\n        const lowerFilter = filter.toLowerCase()\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(lowerFilter))\n    })\n\n\nexport default { getContacts, getFilter, getVisibleContacts}","import React from \"react\";\nimport InputForm from \"./InputForm/InputForm\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {connect} from \"react-redux\";\nimport { contactsOperations } from './../../redux/contacts'\n\n\nclass ContactForm extends React.Component {\n\n\n    state = {\n        name: '',\n        number: '',\n        id:'',\n        sex: 'male'\n    }\n\n    handleChange = e => {\n        const { name, value} = e.currentTarget\n        this.setState({[name]: value})\n        this.setState({id: uuidv4()})\n    }\n\n    addContact = e => {\n        e.preventDefault();\n\n        this.props.contacts.some( elem => elem.name === this.state.name )\n            ? alert(`${this.state.name} is already exist in contacts`)\n            : this.props.onSubmit(this.state)\n\n        this.reset()\n    }\n\n\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n            id: ''\n        })\n    }\n\n\n    render() {\n        return (\n            <InputForm\n                state={this.state}\n                handleChange={this.handleChange}\n                addContact={this.addContact}\n                handleSexRadio={this.handleChange}\n            />\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (data) => dispatch(contactsOperations.addContact(data))\n})\n\n\n\n\nexport default connect(null, mapDispatchToProps)(ContactForm)","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {contactsOperations, contactsSelectors} from './../../redux/contacts'\n\n\n\nconst ContactList = ({contacts, handlerDel}) => {\n    return <div>\n        <ul>\n            {contacts.map(({ name, number, sex, id }) => (\n                <li key={id}>{name}: {number} ({sex})\n                    <button onClick={() => handlerDel(id)} type=\"submit\" id={id}>delete</button>\n                </li>\n            ))}\n        </ul>\n    </div>\n}\n\n\nconst mapStateToProps = (state) => ({\n contacts: contactsSelectors.getVisibleContacts(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    handlerDel: (id) => dispatch(contactsOperations.delContact(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList)","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport contactsActions from './../../redux/contacts/contacts-actions'\nimport {contactsSelectors} from './../../redux/contacts'\n\n\nconst Filter = ({handlerFilter, filter}) => {\n    return <>\n        <p>Find contacts by name:</p>\n        <input onChange={handlerFilter}\n               type=\"text\"\n               value={filter}/></>\n}\n\nconst mapStateToProps = state => ({\n    filter: contactsSelectors.getFilter(state)\n})\nconst mapDispatchToProps = dispatch => ({\n    handlerFilter: (e) => dispatch(contactsActions.changeFilter(e.target.value))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport contactsOperations from './redux/contacts/contacts-operations'\nimport contactSelectors from './redux/contacts/contacts-selectors'\n\n\n\n\n\nclass App extends React.Component {\n\n\n    componentDidMount() {\n        this.props.fetchContacts()\n    }\n\n    render()\n    {\n        return <>\n        <h1>Phonebook</h1>\n            <ContactForm contacts={this.props.contacts}/>\n            <h2>Contacts</h2>\n            {this.props.contacts.length > 1 && <Filter/>}\n            <ContactList/>\n        </>\n  }\n}\n\nconst mapStateToProps = state => ({\n    contacts: contactSelectors.getContacts(state),\n    filter: contactSelectors.getFilter(state),\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\nApp.propTypes = {\n    filter: PropTypes.string,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n            sex: PropTypes.string.isRequired\n        })\n    )\n};\n\n\n","import {combineReducers} from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit'\nimport actions from './contacts-actions'\n\n\nconst {addContactSuccess, delContactSuccess, changeFilter, fetchContactSuccess} = actions\n\n\n\nconst contacts = createReducer([], {\n    [fetchContactSuccess]: (_, {payload}) => payload,\n    [addContactSuccess]: (state, {payload}) => [...state, payload],\n    [delContactSuccess]: (state, {payload}) => state.filter(contact => contact.id !== payload),\n})\n\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, {payload}) => payload,\n})\n\nexport default combineReducers({\n    contacts,\n    filter,\n})\n\n\n// const contacts = (state = initialItems, {type, payload}) => {\n//     switch (type) {\n//         case types.ADD:\n//             return [...state, payload]\n//         case types.DEL:\n//             return state.filter(contact => contact.id !== payload)\n//         default:\n//             return state\n//\n//     }\n// }\n// const filter = (state = '', {type, payload}) => {\n//     switch (type) {\n//         case types.FILTER:\n//             return payload\n//         default:\n//             return state\n//\n//     }\n// }\n\n","import contactsReducer from './contacts/contacts-reducer'\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    }\n})\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}