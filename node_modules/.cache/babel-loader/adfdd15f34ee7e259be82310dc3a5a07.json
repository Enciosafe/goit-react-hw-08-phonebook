{"ast":null,"code":"import axios from \"axios\";\nimport authActions from \"./auth-actions\";\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  }\n\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst logIn = credintials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credintials);\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nexport default {\n  register,\n  logIn,\n  logOut\n};","map":{"version":3,"sources":["/Users/finnegan/projects/projects/goit/react/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["axios","authActions","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","response","post","data","registerSuccess","error","registerError","message","logIn","credintials","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","logoutError"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAGAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,uCAAzB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,GAAG,CAACD,KAAD,EAAQ;AACPJ,IAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAASJ,KAAM,EAA9D;AACH,GAHS;;AAIVK,EAAAA,KAAK,GAAG;AACJT,IAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA8C,EAA9C;AACH;;AANS,CAAd;;AASA,MAAME,QAAQ,GAAGC,WAAW,IAAI,MAAMC,QAAN,IAAkB;AAC9CA,EAAAA,QAAQ,CAACX,WAAW,CAACY,eAAZ,EAAD,CAAR;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,eAAX,EAA4BJ,WAA5B,CAAvB;AAEAP,IAAAA,KAAK,CAACC,GAAN,CAAUS,QAAQ,CAACE,IAAT,CAAcZ,KAAxB;AACAQ,IAAAA,QAAQ,CAACX,WAAW,CAACgB,eAAZ,CAA4BH,QAAQ,CAACE,IAArC,CAAD,CAAR;AACH,GALD,CAKE,OAAOE,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACX,WAAW,CAACkB,aAAZ,CAA0BD,KAAK,CAACE,OAAhC,CAAD,CAAR;AACH;AACJ,CAXD;;AAaA,MAAMC,KAAK,GAAGC,WAAW,IAAI,MAAMV,QAAN,IAAkB;AAC3CA,EAAAA,QAAQ,CAACX,WAAW,CAACsB,YAAZ,EAAD,CAAR;;AAEA,MAAI;AACA,UAAMT,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,cAAX,EAA2BO,WAA3B,CAAvB;AAEAlB,IAAAA,KAAK,CAACC,GAAN,CAAUS,QAAQ,CAACE,IAAT,CAAcZ,KAAxB;AACAQ,IAAAA,QAAQ,CAACX,WAAW,CAACuB,YAAZ,CAAyBV,QAAQ,CAACE,IAAlC,CAAD,CAAR;AACH,GALD,CAKE,OAAOE,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACX,WAAW,CAACwB,UAAZ,CAAuBP,KAAK,CAACE,OAA7B,CAAD,CAAR;AACH;AACJ,CAXD;;AAaA,MAAMM,MAAM,GAAG,MAAM,MAAMd,QAAN,IAAkB;AACnCA,EAAAA,QAAQ,CAACX,WAAW,CAAC0B,aAAZ,EAAD,CAAR;;AAEA,MAAI;AACA,UAAM3B,KAAK,CAACe,IAAN,CAAW,eAAX,CAAN;AACAH,IAAAA,QAAQ,CAACX,WAAW,CAAC2B,aAAZ,EAAD,CAAR;AACH,GAHD,CAGE,OAAOV,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACX,WAAW,CAAC4B,WAAZ,CAAwBX,KAAK,CAACE,OAA9B,CAAD,CAAR;AACH;AACJ,CATD;;AAaA,eAAe;AAACV,EAAAA,QAAD;AAAWW,EAAAA,KAAX;AAAkBK,EAAAA;AAAlB,CAAf","sourcesContent":["import axios from \"axios\";\nimport authActions from \"./auth-actions\";\n\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com'\n\nconst token = {\n    set(token) {\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`\n    },\n    unset() {\n        axios.defaults.headers.common.Authorization = '';\n    }\n}\n\nconst register = credentials => async dispatch => {\n    dispatch(authActions.registerRequest());\n\n    try {\n        const response = await axios.post('/users/signup', credentials)\n\n        token.set(response.data.token)\n        dispatch(authActions.registerSuccess(response.data))\n    } catch (error) {\n        dispatch(authActions.registerError(error.message))\n    }\n}\n\nconst logIn = credintials => async dispatch => {\n    dispatch(authActions.loginRequest());\n\n    try {\n        const response = await axios.post('/users/login', credintials)\n\n        token.set(response.data.token)\n        dispatch(authActions.loginSuccess(response.data))\n    } catch (error) {\n        dispatch(authActions.loginError(error.message))\n    }\n}\n\nconst logOut = () => async dispatch => {\n    dispatch(authActions.logoutRequest());\n\n    try {\n        await axios.post('/users/logout')\n        dispatch(authActions.logoutSuccess())\n    } catch (error) {\n        dispatch(authActions.logoutError(error.message))\n    }\n}\n\n\n\nexport default {register, logIn, logOut}"]},"metadata":{},"sourceType":"module"}